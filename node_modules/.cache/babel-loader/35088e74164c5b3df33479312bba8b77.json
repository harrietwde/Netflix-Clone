{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oliyw\\\\Desktop\\\\Project\\\\netflix-clone\\\\src\\\\Row.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport \"./Row.css\";\nconst base_url = \"https://image.tmdb.org/t/p/original\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow\n}) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0\n    }\n  };\n\n  const handleClick = movie => {\n    // console.table(movie?.title)\n    if (trailerUrl) {\n      setTrailerUrl('');\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.title) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(error => console.log(error));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, title), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row_posters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, movies.map(movie => {\n    return /*#__PURE__*/React.createElement(\"img\", {\n      key: movie.id,\n      onClick: () => handleClick(movie),\n      className: `row_poster ${isLargeRow && \"row_posterLarge\"}`,\n      src: `${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n      alt: movie.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 18\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, trailerUrl && /*#__PURE__*/React.createElement(YouTube, {\n    videoId: trailerUrl,\n    opts: opts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 24\n    }\n  })));\n}\n\nexport default Row;","map":{"version":3,"sources":["C:/Users/oliyw/Desktop/Project/netflix-clone/src/Row.js"],"names":["React","useState","useEffect","axios","YouTube","movieTrailer","base_url","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","map","id","poster_path","backdrop_path","name","padding"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from './axios';\nimport YouTube from 'react-youtube';\nimport movieTrailer from 'movie-trailer';\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original\"\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n\n    async function fetchData() {\n\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  const opts = {\n    height: \"390\",\n    width: \"99%\",\n    playerVars: {\n      autoplay: 0,\n    }\n  }\n\n  const handleClick = (movie) => {\n    // console.table(movie?.title)\n    if (trailerUrl) {\n      setTrailerUrl('')\n    } else {\n      movieTrailer(movie?.title || \"\")\n        .then(url => {\n          const urlParams = new URLSearchParams(new URL(url).search);\n          setTrailerUrl(urlParams.get('v'));\n        }).catch((error) => console.log(error));\n    }\n  }\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n      <div className=\"row_posters\">\n        {movies.map(movie => {\n          return <img\n            key={movie.id}\n            onClick={() => handleClick(movie)}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path}`}\n            alt={movie.name} />\n        })}\n      </div>\n      <div style={{ padding: \"40px\" }}>\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n      </div>\n    </div>\n  );\n}\n\nexport default Row;\n"]},"metadata":{},"sourceType":"module"}